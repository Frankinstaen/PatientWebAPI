// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PatientWebAPI.Data;

#nullable disable

namespace PatientWebAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240812111059_FirstMig")]
    partial class FirstMig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PatientWebAPI.Entity.Active", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Actives");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0d2b16c-dc68-4b97-a1ea-cc08fd290068"),
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("c9c615c8-c120-4159-9367-f65f13b5329d"),
                            IsActive = false
                        });
                });

            modelBuilder.Entity("PatientWebAPI.Entity.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GenderName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ffd6a555-9c6c-4bc6-b054-2897f9856dfd"),
                            GenderName = "male"
                        },
                        new
                        {
                            Id = new Guid("32aae96f-4225-4acb-9ff5-bd4d50d847f7"),
                            GenderName = "female"
                        },
                        new
                        {
                            Id = new Guid("a6ce1de4-4eba-47a5-938d-f21dca901138"),
                            GenderName = "other"
                        },
                        new
                        {
                            Id = new Guid("676a2908-8124-47a8-ad4b-03704322bd1b"),
                            GenderName = "unknow"
                        });
                });

            modelBuilder.Entity("PatientWebAPI.Entity.Name", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId")
                        .IsUnique()
                        .HasFilter("[PatientId] IS NOT NULL");

                    b.ToTable("Names");
                });

            modelBuilder.Entity("PatientWebAPI.Entity.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActiveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActiveId");

                    b.HasIndex("GenderId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("PatientWebAPI.Entity.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("NameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Patronymic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NameId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("PatientWebAPI.Entity.Name", b =>
                {
                    b.HasOne("PatientWebAPI.Entity.Patient", "Patient")
                        .WithOne("Name")
                        .HasForeignKey("PatientWebAPI.Entity.Name", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PatientWebAPI.Entity.Patient", b =>
                {
                    b.HasOne("PatientWebAPI.Entity.Active", "Active")
                        .WithMany("Patients")
                        .HasForeignKey("ActiveId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PatientWebAPI.Entity.Gender", "Gender")
                        .WithMany("Patients")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Active");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("PatientWebAPI.Entity.Person", b =>
                {
                    b.HasOne("PatientWebAPI.Entity.Name", "Name")
                        .WithMany("Given")
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Name");
                });

            modelBuilder.Entity("PatientWebAPI.Entity.Active", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("PatientWebAPI.Entity.Gender", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("PatientWebAPI.Entity.Name", b =>
                {
                    b.Navigation("Given");
                });

            modelBuilder.Entity("PatientWebAPI.Entity.Patient", b =>
                {
                    b.Navigation("Name")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
